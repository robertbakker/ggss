{{>partial_header}}
package {{packageName}}

import (
	"net/http"
	"strings"
    "encoding/json"
	"github.com/gorilla/mux"
	"github.com/spf13/cast"
    "time"
    "github.com/araddon/dateparse"
)

type ApiError interface {
    Error() string
    Status() int
}

type defaultApiError struct {
    error string
    status int
}

func (e *defaultApiError) Error() string {
    return  e.error
}

func (e *defaultApiError) Status() int {
    return e.status
}

func NewApiError(status int, err string) *defaultApiError {
    return &defaultApiError{
        error: err,
        status: status,
    }
}

func NewRouter({{#apiInfo}}{{#apis}}{{#operations}}{{classname}} {{ baseName}}Api{{#hasMore}}, {{/hasMore}}{{/operations}}{{/apis}}{{/apiInfo}}) *mux.Router {
	caster := &caster{}
    caster.noop()

    router := mux.NewRouter().StrictSlash(true)
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
    router.
        Methods(strings.ToUpper("{{httpMethod}}")).
        Path("{{{basePathWithoutHost}}}{{{path}}}").
        Name("{{operationId}}").
        HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
            r.ParseForm()

{{#allParams}}{{#isBodyParam}}
            var {{ paramName}} {{^isContainer}}*{{/isContainer}}{{ dataType}}
            bodyErr := json.NewDecoder(r.Body).Decode(&{{paramName}})
            if bodyErr != nil {
                http.Error(w, bodyErr.Error(), http.StatusBadRequest)
                return
            }
            {{/isBodyParam}}{{#isFormParam}}{{^isListContainer}}{{^isFile}}
            {{paramName}} := r.Form["{{paramName}}"][0]
{{/isFile}}{{#isFile}}
            file, fileHeader, fileErr := r.FormFile("file")
            if fileErr != nil {
                http.Error(w, fileErr.Error(), http.StatusBadRequest)
                return
            }
            defer file.Close()
{{/isFile}}{{/isListContainer}}{{/isFormParam}}{{#isPathParam}}{{^isListContainer}}
            {{paramName}}, pathErr := caster.{{dataType}}(mux.Vars(r)["{{paramName}}"])
            if pathErr != nil {
                http.Error(w, pathErr.Error(), http.StatusBadRequest)
                return
            }
{{/isListContainer}}{{/isPathParam}}{{#isQueryParam}}{{^isListContainer}}
            {{paramName}}, queryErr := caster.{{^isDateTime}}{{dataType}}{{/isDateTime}}{{#isDateTime}}dateTime{{/isDateTime}}(r.URL.Query().Get("{{paramName}}"))
            if queryErr != nil {
                http.Error(w, queryErr.Error(), http.StatusBadRequest)
                return
            }
{{/isListContainer}}{{#isListContainer}}
            {{paramName}} := r.Form["{{paramName}}"]
{{/isListContainer}}{{/isQueryParam}}{{#isHeaderParam}}{{^isListContainer}}
            {{paramName}}, headerErr := caster.{{dataType}}(r.Header.Get("{{paramName}}"))
            if headerErr != nil {
                http.Error(w, headerErr.Error(), http.StatusBadRequest)
                return
            }
{{/isListContainer}}{{/isHeaderParam}}{{/allParams}}

            {{#returnType}}res, {{/returnType}}apiError := {{classname}}.{{operationIdCamelCase}}({{#allParams}}{{^isPrimitiveType}}{{/isPrimitiveType}}{{^isFile}}{{paramName}}{{/isFile}}{{#isFile}}file, fileHeader{{/isFile}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
            if apiError != nil {
                http.Error(w, apiError.Error(), apiError.Status())
                return
            }

            w.Header().Set("Content-Type", "application/json; charset=UTF-8")
            w.WriteHeader(http.StatusOK)
            {{#returnType}}writeErr := json.NewEncoder(w).Encode(res)
            if writeErr != nil {
                http.Error(w, writeErr.Error(), http.StatusInternalServerError)
                return
            }{{/returnType}}
        })
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
	return router
}


type caster struct {}

func (c caster) noop() {}

func (c caster) string(val interface{}) (string, error) {
    return cast.ToStringE(val)
}

func (c caster) int64(val interface{}) (int64, error) {
    return cast.ToInt64E(val)
}

func (c caster) int32(val interface{}) (int32, error) {
    return cast.ToInt32E(val)
}

func (c caster) float64(val interface{}) (float64, error) {
    return cast.ToFloat64E(val)
}

func (c caster) float32(val interface{}) (float32, error) {
    return cast.ToFloat32E(val)
}

func (c caster) dateTime(val interface{}) (time.Time, error) {
    return dateparse.ParseAny(cast.ToString(val))
}
